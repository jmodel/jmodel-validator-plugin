grammar com.github.jmodel.validator.plugin.ValidationLanguage with org.eclipse.xtext.xbase.Xbase

generate validationlanguage "http://www.github.com/jmodel/jmodel-validator-plugin/ValidationLanguage"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

Validation:
	'validation' name=QualifiedName ('extends' superType=[Validation|QualifiedName])? '{' source=Source
	body=Body '}';

Source:
	'source:' name=Format ('[' schema=QualifiedName ']')?;

Body returns xbase::XBlockExpression:
	{Body}
	checkModels+=CheckModel+ (checkService=CheckService)?;

CheckModel returns xbase::XBlockExpression:
	{CheckModel}
	(precondition=Precondition)?
	'check' 'model' ID '{' blocks+=Block+ '};';

CheckService returns xbase::XBlockExpression:
	{CheckService}
	'check' 'service' '{' services+=Service+ '};';

Service:
	{Service}
	serviceName=ServiceName '(' argsCount=INT ')' ';';

ServiceName:
	ID;

Block returns xbase::XBlockExpression:
	{Block}
	(absolutePath=AbsolutePath)? modelPath=ModelPathExpr
	'{' (filter=Filter)?
	blockContents+=BlockContent* '}';

BlockContent:
	{BlockContent}
	content=(Rule | Block | ArgsSetting);

Rule returns xbase::XExpression:
	{Rule}
	fieldPathIf=FieldPathIf;

ArgsSetting returns xbase::XExpression:
	{ArgsSetting}
	serviceName=ServiceName '(' argIndex=INT ')' '<<' arg=Arg ';';

Arg returns xbase::XExpression:
	{Arg}
	expression=(FieldPathXLiteral | FieldPathXParenthesizedExpression | SingleFieldPath | Variable);

FieldPathXLiteral returns xbase::XExpression:
	{FieldPathXLiteral}
	content=XLiteral;

FieldPathXParenthesizedExpression returns xbase::XExpression:
	{FieldPathXParenthesizedExpression}
	content=XParenthesizedExpression;

AbsolutePath:
	'#'+;

ModelPathExpr:
	('.' | ValidID) ('[]')? (=> '.' ValidID ('[]')?)*;

Precondition:
	{Precondition}
	':' expression=XOrExpression;

Filter:
	{Filter}
	':' expression=XOrExpression;

Variable returns xbase::XExpression:
	{Variable}
	expression=VariablePath ('(' dataType=DataType (':' pattern=STRING)? ')')?;

VariablePath:
	'${' ValidID '}';

SingleFieldPath returns xbase::XExpression:
	{SingleFieldPath}
	(absolutePath=AbsolutePath)? content=QualifiedName ('(' dataType=DataType (':' pattern=STRING)? ')')?;

@ Override XPrimaryExpression returns xbase::XExpression:
	XBlockExpression |
	XIfExpression |
	XParenthesizedExpression |
	XLiteral |
	SingleFieldPath |
	Variable;

@ Override OpCompare:
	'>=' | '<' '=' | '>' | '<' | 'in';

FieldPathIf returns xbase::XIfExpression:
	{FieldPathIf}
	"IF" if=XOrExpression "THEN"
	then=FailedMessageSetting
	"ENDIF";

FailedMessageSetting returns xbase::XBlockExpression:
	{FailedMessageSetting}
	'fail:' message=STRING;

enum Format:
	XML='XML' | JSON='JSON' | BEAN='BEAN';

enum DataType:
	STR='STR' | INT='INT' | LONG='LONG' | BOOL='BOOL' | DEC='DEC' | DATE='DATE';		
